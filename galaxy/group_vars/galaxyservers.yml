---

proxy: 'http://alfortproxy.afssa.fr:8080/'  

    ##Slurm installation via serveur_cluster (ansible)
    #slurm_roles: ['controller', 'exec']
    #slurm_nodes: 
    #- name: localhost 
    #  CPUs: 10
    #
    #slurm_config:      
    #  SlurmdParameters: config_overrides
    #  SelectType: select/cons_res
    #  SelectTypeParameters: CR_CPU_Memory    
    #
# PostgreSQL
postgresql_objects_users:
  - name: galaxy
    password: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
# Galaxy
galaxy_create_user: false
galaxy_separate_privileges: false
galaxy_manage_paths: true
galaxy_layout: root-dir
nfs_dir: /server/galaxy
galaxy_root: "{{ nfs_dir }}/srv"
galaxy_file_path: "{{nfs_dir}}/data"
galaxy_user:
  name: prep_galaxy
  shell: /bin/bash
galaxy_remote_user:
   name: admin    
galaxy_commit_id: release_21.01
galaxy_config_style: yaml
galaxy_force_checkout: true
galaxy_tool_dependency_dir: "{{ nfs_dir }}/tool_dependency"
galaxy_shed_tools_dir: "{{nfs_dir}}/shed_tools"
galaxy_job_working_directory: "{{nfs_dir}}/jobs"
#galaxy_server_dir
galaxy_venv_dir: "{{ nfs_dir }}/venv"
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 4.7.12
miniconda_manage_dependencies: true

galaxy_config:
  galaxy:
    brand: "anses"
    admin_users: edouard.hirchaud@anses.fr, pierrick.lucas@anses.fr
    database_connection: "postgres://galaxy:galaxy@localhost:5432/galaxy" 
#    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    dependency_resolvers_config_file: "{{ galaxy_config_dir }}/dependency_resolvers_conf.xml"
    containers_resolvers_config_file: "{{ galaxy_config_dir }}/container_resolvers_conf.xml"
#    shed_tool_config_file: "{{ galaxy_config_dir }}/shed_tool_conf.xml"
    tools_path: "{{ nfs_dir }}/tools" 
#    tool_sheds_config_file: "{{ galaxy_config_dir }}/tool_sheds_conf.xml"
    data_dir: "{{nfs_dir}}"
    tool_data_path: "{{nfs_dir}}/tool-data"
  #  file_path: "{{nfs_dir}}/data"
    check_migrate_tools: false
    database_engine_option_server_side_cursors: true
    #slow_query_log_threshold: 0.0
    # enable_per_request_sql_debugging: true
    nginx_x_accel_redirect_base: /_x_accel_redirect
    cleanup_job: onsuccess
    retry_job_output_collection: 3
    allow_user_impersonation: true
    outputs_to_working_directory: true


  uwsgi:
      # mount: "/=galaxy.webapps.galaxy.buildapp:uwsgi_app()"
  # socket: "/srv/galaxy/var/uwsgi.sock"
    socket: 127.0.0.1:8080
    buffer-size: 16384
    processes: 1
    threads: 4
    offload-threads: 2
    static-map:
      - /static={{ galaxy_server_dir }}/static
      - /favicon.ico={{ galaxy_server_dir }}/static/favicon.ico
    static-safe: client/galaxy/images    
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2

supervisor_socket_user: 'galaxy'
supervisor_socket_chown: 'galaxy'
galaxy_restart_handler_name: galaxy restart

supervisor_programs:
  - name: galaxy
    state: present
    command: uwsgi --yaml {{ galaxy_config_dir }}/galaxy.yml
    configuration: |
      autostart=true
      autorestart=true
      startretries=1
      startsecs=10
      user=galaxy
      umask=022
      directory={{ galaxy_server_dir }}
      environment=HOME={{ galaxy_mutable_data_dir }},VIRTUAL_ENV={{ galaxy_venv_dir }},PATH={{ galaxy_venv_dir }}/bin:%(ENV_PATH)s,DRMAA_LIBRARY_PATH="/usr/lib/slurm-drmaa/lib/libdrmaa.so.1",HTTP_PROXY={{ proxy }},HTTPS_PROXY={{ proxy }},http_proxy={{ proxy }},https_proxy={{ proxy }}


   
hostname: "prepMetvet-galaxy.gvb.anses.fr"
nginx_package_name: nginx-full # nginx-galaxy on RHEL/CentOS
nginx_remove_default_vhost: true
nginx_server_names_hash_bucket_size: "128"
nginx_vhosts:
  - listen: "80"
    server_name: "{{ hostname }}"
    root: "/var/www/{{ hostname }}"
    index: "index.html"
    access_log: "/var/log/nginx/access.log"
    error_log: "/var/log/nginx/error.log"
    state: "present"
    filename: "{{ hostname }}.conf"
    extra_parameters: |
        client_max_body_size 10G; # aka max upload size, defaults to 1M
        uwsgi_read_timeout 2400;

        location / {
            uwsgi_pass      127.0.0.1:8080;
            uwsgi_param UWSGI_SCHEME $scheme;
            include         uwsgi_params;
        }


        location /static {
                alias {{ galaxy_server_dir }}/static;
                expires 24h;
        }

        location /static/style {
                alias {{ galaxy_server_dir }}/static/style/blue;
                expires 24h;
        }

        location /static/scripts {
                alias {{ galaxy_server_dir }}/static/scripts;
                expires 24h;
        }

        location /robots.txt {
                alias {{ galaxy_server_dir }}/static/robots.txt;
        }

        location /favicon.ico {
                alias {{ galaxy_server_dir }}/static/favicon.ico;
        }

        location /static/welcome.html {
                alias {{ galaxy_server_dir }}/static/welcome.html.sample;
        }
        location /_x_accel_redirect {
                internal;
                alias /;
        }
        # serve visualization and interactive environment plugin static content
        location ~ ^/static/plugins/(?<plug_type>.+?)/(?<vis_name>.+?)/static/(?<static_file>.*?)$ {
            alias {{ galaxy_server_dir}}/config/plugins/$plug_type/$vis_name/static/$static_file;
        }

        location /gie_proxy {
         proxy_pass http://localhost:8800/gie_proxy;
         proxy_redirect off;
        }

        location ~ /gie_proxy/jupyter/ipython/(?<nbtype>[^/]+)/api/kernels(?<rest>.*?)$ {
         proxy_pass http://localhost:8800/gie_proxy/jupyter/ipython/$nbtype/api/kernels$rest;
         proxy_redirect off;
         proxy_http_version 1.1;
         proxy_set_header Upgrade $http_upgrade;
         proxy_set_header Connection "upgrade";
        }

        location /gie_proxy/gc_cover {
         proxy_pass http://localhost:8800/;
         proxy_redirect off;
        }

        location ^~ /display_application/[a-zA-Z0-9]+/igv.* {
         proxy_set_header REMOTE_USER igv_display@galaxy.anses.fr;
         allow all;
        }

galaxy_config_templates:
  - src: templates/galaxy/config/container_resolvers_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.containers_resolvers_config_file }}"
  - src: templates/galaxy/config/dependency_resolvers_conf.xml
    dest: "{{ galaxy_config.galaxy.dependency_resolvers_config_file }}"
